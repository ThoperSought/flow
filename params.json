{"name":"Flow","tagline":" Write more understandable Haskell.","body":"<p align=\"center\">\r\n    <img alt=\"\" src=\"https://a.pomf.se/gnowsh.svg\">\r\n</p>\r\n\r\n<p align=\"center\">\r\n    <a href=\"https://hackage.haskell.org/package/flow\"><img alt=\"\" src=\"https://img.shields.io/hackage/v/flow.svg?label=version&style=flat-square\"></a>\r\n    <a href=\"https://travis-ci.org/tfausak/flow\"><img alt=\"\" src=\"https://img.shields.io/travis/tfausak/flow/master.svg?label=build&style=flat-square\"></a>\r\n    <a href=\"http://packdeps.haskellers.com/feed?needle=flow\"><img alt=\"\" src=\"https://img.shields.io/hackage-deps/v/flow.svg?label=dependencies&style=flat-square\"></a>\r\n</p>\r\n\r\n<hr>\r\n\r\nFlow is a package that provides functions and operators for writing more\r\nunderstandable Haskell. It's an alternative to some common idioms like function\r\napplication with [`($)`][] and function composition with [`(.)`][].\r\n\r\n-   [Requirements](#requirements)\r\n-   [Installation](#installation)\r\n-   [Usage](#usage)\r\n\r\n## Requirements\r\n\r\nFlow requires a Haskell compiler. It is tested with recent versions of GHC, but\r\nolder or different compilers should be acceptable. For installation with Cabal,\r\nFlow requires at least Cabal 1.8.\r\n\r\n## Installation\r\n\r\nTo add Flow as a dependency to your package, add it to your Cabal file.\r\n\r\n```\r\nbuild-depends: flow ==1.*\r\n```\r\n\r\nFor other use cases, install it with Cabal.\r\n\r\n``` sh\r\n$ cabal install 'flow ==1.*'\r\n```\r\n\r\nFlow uses [Semantic Versioning][]. See [the change log][] for a detailed list\r\nof changes.\r\n\r\n## Usage\r\n\r\nFlow is designed to be imported unqualified. It does not export anything that\r\nconflicts with [the base package][].\r\n\r\n``` hs\r\nimport Flow\r\n```\r\n\r\nHere is a quick overview of the functions and operators that Flow provides.\r\n\r\nBase          | Flow\r\n------------- | ---------------\r\n`f x`         | `apply x f`\r\n`x & f`       | `x |> f`\r\n`f $ x`       | `f <| x`\r\n`g (f x)`     | `compose f g x`\r\n`g >>> f`     | `f .> g`\r\n`g . f`       | `g <. f`\r\n`seq x (f x)` | `apply' x f`\r\n`f $! x`      | `x !> f`\r\n`f $! x`      | `f <! x`\r\n\r\nFor more information about Flow, please read [the Haddock documentation][].\r\n\r\n[`($)`]: http://hackage.haskell.org/package/base-4.8.0.0/docs/Prelude.html#v:-36-\r\n[`(.)`]: http://hackage.haskell.org/package/base-4.8.0.0/docs/Prelude.html#v:.\r\n[semantic versioning]: http://semver.org/spec/v2.0.0.html\r\n[the change log]: CHANGELOG.md\r\n[the base package]: http://hackage.haskell.org/package/base\r\n[the haddock documentation]: https://hackage.haskell.org/package/flow/docs/Flow.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}